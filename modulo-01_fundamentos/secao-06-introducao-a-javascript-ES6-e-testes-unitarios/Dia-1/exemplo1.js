// Utilizando arrow functions, voc√™ criou a fun√ß√£o, definiu que ela recebe dois par√¢metros e que retorna a soma entre eles.

// Para saber se a fun√ß√£o est√° executando corretamente, √© preciso test√°-la. Para isso, execute o c√≥digo abaixo:

// const sum = (value1, value2) => {
//     return value1 + value2;
//   };
  
//   console.log(sum(2, '3'));

//   2 + ‚Äò3‚Äô = ‚Äò23‚Äô? Uma intera√ß√£o bastante inusitada, concorda?

// O que aconteceu foi que a sua fun√ß√£o, ao perceber que estava fazendo uma opera√ß√£o com par√¢metros de tipos distintos (n√∫mero + string), converteu o primeiro par√¢metro para uma string, e a opera√ß√£o realizada foi de concatena√ß√£o de strings por meio do sinal de +.

// Esse comportamento ocorre porque o JavaScript √© considerado uma linguagem din√¢mica. Ou seja, quando se declara uma vari√°vel, n√£o √© necess√°rio definir o tipo de dado, o que permite que ela mude de tipo ao longo da execu√ß√£o do c√≥digo.

// Por mais que esse aspecto traga alguma flexibilidade, ele tamb√©m produz comportamentos inesperados, como voc√™ viu no exemplo acima. Por isso, voc√™, enquanto boa pessoa programadora, deve ser capaz de prever esses comportamentos e evitar que eles ocorram. üòâ

// No caso da fun√ß√£o que voc√™ criou para realizar a soma dos n√∫meros, √© poss√≠vel adicionar uma condicional para verificar o tipo do dado passado como par√¢metro. Analise e execute o c√≥digo abaixo:

// const sum = (value1, value2) => {
//     if (typeof value1 !== 'number' || typeof value2 !== 'number') {
//       return 'Os valores devem ser num√©ricos';
//     }
//     return value1 + value2;
//   };
  
//   console.log(sum(2, '3'));
  
//   Para tratar erros em um c√≥digo JavaScript, precisamos do fluxo de exce√ß√£o. Para isso, podemos interromper o funcionamento do c√≥digo e lan√ßar um erro por meio do throw new Error, que cria e lan√ßa um objeto de erro. Veja o exemplo abaixo:

// const sum = (value1, value2) => {
//     if (typeof value1 !== 'number' || typeof value2 !== 'number') {
//       throw new Error('Os valores devem ser num√©ricos');
//     }
//     return value1 + value2;
//   };
  
//   console.log(sum(2, '3'));

const verifyIsNumber = (value1, value2) => {
    if (typeof value1 !== 'number' || typeof value2 !== 'number') {
      throw new Error('Os valores devem ser num√©ricos'); // atrav√©s do construtor `new Error` j√° sabemos que ser√° lan√ßada a mensagem se algo der errado.
    }
  };
  
  const sum = (value1, value2) => {
    // o `try` vai executar a fun√ß√£o verifyNumber e retornar a soma caso os par√¢metros sejam n√∫meros
    try { 
      verifyIsNumber(value1, value2);
      return value1 + value2;
    // se o bloco `try` apresentar erro, o `catch` vai capturar esse erro e retornar a mensagem j√° criada atrav√©s da propriedade `.message` nativa do objeto Error.
    } catch (error) {
      return error.message;
    }
  };
  
  console.log(sum(2, '3'));